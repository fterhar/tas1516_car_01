# Contribution Anthony Carnevale: Move backwards if next goal can't be reached

The contribution consists of writing the node "detect_stuck" which receives the needed velocity of the "move_base" node and the current velocity of the adapted "tas_odom" node and compares both messages to decide if the car got stuck and a short backwards move is needed for a new try to reach the goal.

The written/changed code is in the files: 
- https://github.com/tas1516-group-01/tas1516_car_01/blob/master/detect_stuck/src/control_vel.cpp
- https://github.com/tas1516-group-01/tas1516_car_01/blob/master/tas_odom/src/tas_odom.cpp
- https://github.com/tas1516-group-01/tas1516_car_01/blob/master/publish_short_moves/src/short_moves_pub.cpp

Program Flow:
  1. Initialization: Publish current velocity in tas_odom and create callback functions in detect_stuck for receiving the velocity values.
  2. What detect_stuck does: 
  3. What wii_control was changed for: As already mentioned this node now is subscribet to the new topic "interrupt". The created callback function stores the arriving flag change from the short_moves-node and if the flag is set (what means that the servo topic is "busy" because short moves are executed) neither in the case of driving autonomous (change in tas_autonomous_control node) nor in the case of driving manually (change in wii_control node) the servo value gets published. That is a required function to ensure that the PWM-values don't get overwritten by the wii controller.

## Execution

Starting the node:

> rosrun publish_short_moves short_moves_pub

## Video

The following video shows the working code:

https://www.dropbox.com/s/wxnmmmxl2lvyi0h/short_moves_video.MOV?dl=0
